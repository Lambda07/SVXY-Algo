import pandas
import pandas as pd
import datetime
import numpy as np
import talib
from scipy import stats
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import CustomFactor, Latest
from quantopian.pipeline.data.quandl import cboe_vix, cboe_vxv, cboe_vxd, cboe_vvix
from quantopian.pipeline.data.quandl import yahoo_index_vix
from quantopian.pipeline.factors import SimpleMovingAverage

class GetVIX(CustomFactor):
    window_length = 1
    def compute(self, today, assets, out, vix):
        out[:] = vix[-1]
        
"""
The initialize function sets any data or variables that 
you'll use in your algorithm. 
It's only called once at the beginning of your algorithm.
"""
def initialize(context):
    # set up XIV
    context.SVXY = sid(40516)
    context.UVXY = sid(41969)
    
    context.sell_price = 0
    context.vix_last_price = 0
    
    # fetch VIX data
    pipe = Pipeline()
    attach_pipeline(pipe, 'my_pipeline')
    
    #get VIX at market open
    pipe.add(GetVIX(inputs=[cboe_vix.vix_close]), 'VixOpen')
    #get VIX average in the last 2 days
    pipe.add(SimpleMovingAverage(inputs=[cboe_vix.vix_close], window_length=2), 'vix_mean') 

    set_slippage(slippage.FixedSlippage(spread=.02)) # add a slippage
    set_commission(commission.PerShare(cost=0.0135, min_trade_cost=1)) # add a commission
    
    schedule_function(
         rebalance, 
         date_rules.every_day(),
         time_rules.market_open(minutes=1)
     )
    
    '''
    # total minutes in a trading day
    total_minutes = 6*60 + 30
    for i in range(1, total_minutes):
        # Every 30 minutes run schedule
        if i % 30 == 0:
            # This will start at 9:31AM and will run every 30 minutes
            # Specify that we want the 'rebalance' method to run
            schedule_function(
                rebalance, 
                date_rules.every_day(),
                time_rules.market_open(minutes=i),
                True
            )
    '''
    
def before_trading_start(context,data):
    output = pipeline_output('my_pipeline')
    context.vix = output["VixOpen"].iloc[0] 
    context.vix_mean = output["vix_mean"].iloc[0] # last 2 days average of VIX
    
"""
Rebalance function scheduled to run once per day (at market open).
"""
def rebalance(context, data):
    
    # We get VIX's current price. 
    current_price = context.vix  # vix current value at market open
    vix_mean = context.vix_mean  # vix mean value of last 2 days
    if (context.vix_last_price == 0):
        context.vix_last_price = current_price # set our last trading VIX price
    
    xiv_current = data.current(context.XIV, 'price') 
    price_history = data.history(context.XIV, "price", 30, "1d") 
    xiv_mean = price_history.mean() # get the last 30 days average of XIV
    xiv_std = price_history.std() # get the standard deviation of XIV
    #log.info("xiv_std, xiv, vix______ %s, %s, %s" % (xiv_std, xiv_current, current_price))
    
    # If XIV is currently listed on a major exchange
    if data.can_trade(context.SVXY):
        # If VIX index is above 59, we buy XIV. 
        if (current_price >= 59):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.XIV, 1)
                order_target_percent(context.VXZ, 0)
                log.info("VIX: %s" % current_price)
                log.info("SVXY_current %s" % SVXY_current)
            
        elif (current_price >= 55):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.SVXY, 1)
                order_target_percent(context.VXZ, 0)
                log.info("VIX: %s" % current_price)
                log.info("SVXY_current %s" % SVXY_current)
           
        elif (current_price >= 51):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.XIV, 1)
                order_target_percent(context.VXZ, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        elif (current_price >= 47):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.XIV, 1)
                order_target_percent(context.VXZ, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        elif (current_price >= 43):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        elif (current_price >= 39):
            if (context.sell_price == 0):
                context.sell_price = 12.3
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)  
            
        elif (current_price >= 35.3):
            if (context.sell_price == 0):
                context.sell_price = 12.4
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)  
            
        elif (current_price >= 31.4):
            if (context.sell_price == 0):
                context.sell_price = 12.4
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        elif (current_price >= 27.5):
            if (context.sell_price == 0):
                context.sell_price = 12.4
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        elif (current_price >= 23.6): # second buy price at 23.6
            if (context.sell_price == 0):
                context.sell_price = 12.4
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX: %s" % current_price)
                log.info("xiv_current %s" % xiv_current)
            
        # If VIX index is above 19.5, we buy XIV. In case of a normal spike.
        elif (current_price >= 19.5):
            if (context.sell_price == 0):
                context.sell_price = 12.4 # Set a sell price at 12.4
                order_target_percent(context.XIV, 1)
                #order_target_percent(context.UVXY, 0)
                log.info("VIX__________ %s" % current_price)
                log.info("VIX_mean_____ %s" % vix_mean)
                log.info("xiv_current__ %s" % xiv_current)
            
        # If VIX index is below sell price and xiv below xiv_30d_mean + 2.7, we sell XIV.
        elif (current_price <= context.sell_price and xiv_current <= xiv_mean + 2.7):
            # Sell all of our shares by setting the target position to zero
            order_target_percent(context.XIV, 0)
            #order_target_percent(context.UVXY, 0.1)
            log.info("VIX_current____________ %s" % current_price)
            log.info("VIX_mean_______________ %s" % vix_mean)
            log.info("xiv_current____________ %s" % xiv_current)
            log.info("xiv_mean_______________ %s" % xiv_mean)
            context.sell_price = 0
        context.vix_last_price = current_price
  
    #record(Leverage=context.account.leverage)
    record(VIX=current_price)
    record(XIV=xiv_current)
